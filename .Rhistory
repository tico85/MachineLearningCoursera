runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?subset
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
subset(mtcars, select=mpg)
mean(subset(mtcars, select=mpg))
mean(subset(mtcars,select=mpg)[,1])
round(mean(subset(mtcars,select=mpg)[,1]),2)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='tico85',
token='8B9601981BC7175930E10A0C2F90E1C3',
secret='<SECRET>')
rsconnect::setAccountInfo(name='tico85',
token='8B9601981BC7175930E10A0C2F90E1C3',
secret='a3xeiqm1e08GKQFY+4D7M6ilgPYe8jezGIO+dDJ/')
getwd()
runApp()
library(shiny)
runApp()
runApp()
runapp()
runApp()
getwd()
setwd("/Users/triston/Desktop/Data Science Work/Dataproducts/")
setwd("/Users/triston/Desktop/Data Science Work/Dataproducts/MachineLearning")
setwd("/Users/triston/Desktop/Data Science Work/Dataproducts/Machinelearning")
setwd("/Users/triston/Desktop/Data Science Work/MachineLearning"
)
getwd()
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile="Activity.csv")
act<-read.csv(activity)
act<-read.csv("activity.csv"")
act<-read.csv("activity.csv")
act<-read.csv(activity.csv)
?read.csv
act<-read.csv(activity.csv)
getwd()
act<-read.csv(Activity.csv)
act<-read.csv(Activity)
act<-read.csv("Activity")
act<-read.csv("Activity.csv",header=F)
head(act)act
head(act)
act<-read.csv("Activity.csv",header=T)
head(act)
str(act)
str(act$classe)
count(is.na(act$max_picth_dumbbell))
sum(is.na(act$max_picth_dumbbell))
head(act$kurtosis_roll_belt)
act$kurtosis_roll_arm<-as.numeric(act$kurtosis_roll_arm)
str(act$kurtosis_roll_arm)
head(act$kurtosis_roll_arm)
act<-read.csv("Activity.csv",header=T)
unique(act$kurtosis_roll_arm)
?as.numeric
try<-as.numeric(as.character(act$kurtosis_roll_arm))
unique(try)
act$kurtosis_roll_amr<-as.numeric(as.character(act$kurtosis_roll_arm))
fieldfix<-cnames(act)
fieldfix<-colnames(act)
fieldfix
try<-apply(act,class)
try<-apply(act,FUN=class)
?apply
try<-apply(act,1:ncol(act),FUN=class)
try<-lapply(act,class)
try
try<-sapply(act,class)
try
class(try)
dim(try)
try<-lapply(act,class)
class(try)
dim(try)
try[32]
try[[32]]
try<-tapply(act,class)
?lapply
?arrray
?array
try$<-sapply(act,class)
try<-sapply(act,class)
try
try[32]
try[[32]]
library(grep)
library(grepl)
?grep
try<-lapply(act,class)
str(try)
try[,2]
try[,1]
try[1]
try$user_name
try[1:30]
try[31:60]
str(try)
cnames(try)
colnames(try)
try2<-subset(try, try[[2]]=="factor")
try2
try2<-subset(try, try[,2]=="factor")
try2<-subset(try, try[,1]=="factor")
try2<-subset(try, try[[,1]]=="factor")
try2<-subset(try, try=="factor")
try
try2
try2
act$kurtosis_roll_belt<-as.numeric(as.character(act$kurtosis_roll_belt))
act$kurtosis_picth_belt<-as.numeric(as.character(act$kurtosis_picth_belt))
act$kurtosis_picth_belt<-as.numeric(as.character(act$kurtosis_picth_belt))
act$kurtosis_yaw_belt<-as.numeric(as.character(act$kurtosis_yaw_belt))
act$skewness_roll_belt<-as.numeric(as.character(act$skewness_roll_belt))
act$skewness_roll_belt.1<-as.numeric(as.character(act$skewness_roll_belt.1))
act$skewness_yaw_belt<-as.numeric(as.character(act$skewness_yaw_belt))
act$max_yaw_belt<-as.numeric(as.character(act$max_yaw_belt))
act$min_yaw_belt<-as.numeric(as.character(act$min_yaw_belt))
act$min_pitch_belt<-as.numeric(as.character(act$min_pitch_belt))
act$min_yaw_belt<-as.numeric(as.character(act$min_yaw_belt))
act$amplitude_yaw_belt<-as.numeric(as.character(act$amplitude_yaw_belt))
act$kurtosis_roll_arm<-as.numeric(as.character(act$kurtosis_roll_arm))
act$kurtosis_picth_arm<-as.numeric(as.character(act$kurtosis_picth_arm))
act$kurtosis_yaw_arm<-as.numeric(as.character(act$kurtosis_yaw_arm))
act$skewness_roll_arm<-as.numeric(as.character(act$skewness_roll_arm))
act$skewness_pitch_arm<-as.numeric(as.character(act$skewness_pitch_arm))
act$skewness_yaw_arm<-as.numeric(as.character(act$skewness_yaw_arm))
act$kurtosis_roll_dumbbell<-as.numeric(as.character(act$kurtosis_roll_dumbbell))
act$kurtosis_picth_dumbbell<-as.numeric(as.character(act$kurtosis_picth_dumbbell))
act$kurtosis_yaw_dumbbell<-as.numeric(as.character(act$kurtosis_yaw_dumbbell))
act$skewness_roll_dumbbell<-as.numeric(as.character(act$skewness_roll_dumbbell))
act$skewness_pitch_dumbbell<-as.numeric(as.character(act$skewness_pitch_dumbbell))
act$skewness_yaw_dumbbell<-as.numeric(as.character(act$skewness_yaw_dumbbell))
act$max_yaw_dumbbell<-as.numeric(as.character(act$max_yaw_dumbbell))
act$min_yaw_dumbbell<-as.numeric(as.character(act$min_yaw_dumbbell))
act$amplitude_yaw_dumbbell<-as.numeric(as.character(act$amplitude_yaw_dumbbell))
act$kurtosis_roll_forearm<-as.numeric(as.character(act$kurtosis_roll_forearm))
act$kurtosis_picth_forearm<-as.numeric(as.character(act$kurtosis_picth_forearm))
act$kurtosis_yaw_forearm<-as.numeric(as.character(act$kurtosis_yaw_forearm))
act$skewness_roll_forearm<-as.numeric(as.character(act$skewness_roll_forearm))
act$skewness_pitch_forearm<-as.numeric(as.character(act$skewness_pitch_forearm))
act$skewness_yaw_forearm<-as.numeric(as.character(act$skewness_yaw_forearm))
act$max_yaw_forearm<-as.numeric(as.character(act$max_yaw_forearm))
act$min_yaw_forearm<-as.numeric(as.character(act$min_yaw_forearm))
act$amplitude_yaw_forearm<-as.numeric(as.character(act$amplitude_yaw_forearm))
library(corrplot)
install.packages("corrplot")
corr<-corr(act)
library(caret)
?createDataPartition
Intrain<-createDataPartition(act$classe,p=.75,list=FALSE)
InTrain<-createDataPartition(act$classe,p=.75,list=FALSE)
Training<-act[Intrain,]
Testing<-act[-Intrain,]
?hclust
?dist
hc<-hclust(dist(Training))
plot(hc)
?train
Fit1<-traing(classe ~ ., method="rf", data=act)
Fit1<-train(classe ~ ., method="rf", data=act)
Fit1<-train(classe ~ ., method="rf", data=act, na.omit=TRUE)
Fit1<-train(classe ~ ., method="rf", data=act, na.action=na.omit)
act2<-sapply(act, FUN=functionx(x) {sum(is.na(x))/nrow(x)})
?sapply
?function
?function
?function()
na_count <-sapply(act, function(y) sum(length(which(is.na(y)))))
na_count
class(na_count)
try<-act
try<-try[,-grep("var_",colnames(try))]
colnames(try)
try<-try[,-grep("avg_",colnames(try))]
try<-try[,-grep("min_",colnames(try))]
try<-try[,-grep("max_",colnames(try))]
try<-try[,-grep("stddev_",colnames(try))]
try<-try[,-grep("kurtosis_",colnames(try))]
try<-try[,-grep("skewness_",colnames(try))]
na_count <-sapply(try, function(y) sum(length(which(is.na(y)))))
na_count
try<-try[,-grep("amplitude_",colnames(try))]
act<-act[,-grep("amplitude_",colnames(act))]
act<-act[,-grep("avg_",colnames(act))]
act<-act[,-grep("min_",colnames(act))]
act<-act[,-grep("max_",colnames(act))]
act<-act[,-grep("stddev_",colnames(act))]
act<-act[,-grep("kurtosis_",colnames(act))]
act<-act[,-grep("skewness_",colnames(act))]
na_count <-sapply(act, function(y) sum(length(which(is.na(y)))))
na_count
act<-act[,-grep("var_",colnames(act))]
act<-act[act$new_window!="Yes",]
unique(act$new_window)
act<-act[act$new_window!="yes",]
unique(act$new_window)
Fit1<-(classe ~ ., method="rf", data=act)
Intrain<-createDataPartition(act$classe,p=.75,list=FALSE)
Training<-[Intrain,]
Training<-act[Intrain,]
Testing<-act[-Intrain,]
Fit1<-train(classe ~ ., method="rf", data=Training)
library(ggplot2)
library(randomForest)
Fit1<-train(classe ~ ., method="rf", data=Training)
?fit
Fit1<-train(classe ~ ., method="gbm", data=Training)
warnings()
Pred1<-predict(Fit1, Testing)
head(Pread1)
head(Pred1)
?table
table(Pred1,Testing$classe)
Pred2<-predict(Fit1, Training)
table(Pred2,Testing$classe)
table(Pred2,Training$classe)
download.file("
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfitle="Finaltest.csv", cacheOK=T)
download.file("
https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfitle="Finaltest.csv", cacheOK=T)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile="Activity.csv", cacheOK=T)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile="FinalTest.csv", cacheOK=T)
FinalTest<-read.csv("FinalTest.csv")
FinalPred<-Predict(Fit1, FinalTest)
FinalPred<-predict(Fit1, FinalTest)
table(FinalPred,FinalTest$classe)
nrows(FinalPred)
nrow(FinalPred)
nrow(FinalPred)
nrow(FinalTest)
FinalPred
table(FinalPred,FinalTest$classe)
nrow(FinalPred)
FinalPred
class(FinalPred)
FinalPred<-predict(Fit1, FinalTest)
class(FinalPred)
FinalPred
?predict
summary(Fit1)
FinalTest
Intrain<-createDataPartition(act$classe,p=.75,list=FALSE)
Trianing<-act[Intrain,-(1:7)]
Testing<-act[-Intrain, -(1:7)]
head(Training)
head(Intrain)
Training[,-(1:7)]
Testing[,-(1:7)]
Training<-Training[,-(1:7)]
Testing<-Testing[,-(1:7)]
Fit1<-train(classe ~ ., method="gbm",data=Training)
summary(Fit1)
corrplot(Training, method="number")
library(corrplot)
corrplot(Training, method="number")
Pred1<-predict(Fit1, Training)
table(Pred1,Testing$classe)
Pred1<-predict(Fit1, Testing)
table(Pred1,Testing$classe)
Pred1<-predict(Fit1, Testing)
dim(Training)
dim(Testing)
head(Training)
head(Testing)
Testing<-act[-Intrain,]
Testing<-Testing[,-(1:7)]
dim(Testing)
Pred1<-predict(Fit1, Testing)
table(Pred1,Testing$classe)
sum(diag(table(Pred1,Testing$classe)))
sum(diag(table(Pred1,Testing$classe)))/nrow(Testing)
round(sum(diag(table(Pred1,Testing$classe)))/nrow(Testing))
round(sum(diag(table(Pred1,Testing$classe)))/nrow(Testing),2)
round(sum(diag(table(Pred1,Testing$classe)))/nrow(Testing),3)
round(1-(sum(diag(table(Pred1,Testing$classe)))/nrow(Testing)),3)
Fit2<-train(classe ~ ., method="rf",data=Training)
summary(Fit2)
Pred2<-predict(Fit2, Testing)
table(Pred2,Testing$classe)
round(1-(sum(diag(table(Pred2,Testing$classe)))/nrow(Testing)),3)
FinalValidcation<-FinalValidcation[,-grep("amplitude_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("avg_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("min_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("max_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("stddev_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("kurtosis_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("skewness_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("var_",colnames(FinalValidcation))]
if (!file.exists("Activity.csv"))
{
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile="FinalValidation.csv", cacheOK=T)
}
if (!exists("FinalValidation"))
{
FinalValidation<-read.csv("FinalValidation.csv",header=TRUE)
}
if (!file.exists("FinalValidation.csv"))
{
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", destfile="FinalValidation.csv", cacheOK=T)
}
if (!exists("FinalValidation"))
{
FinalValidation<-read.csv("FinalValidation.csv",header=TRUE)
}
FinalValidcation<-FinalValidcation[,-grep("amplitude_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("avg_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("min_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("max_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("stddev_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("kurtosis_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("skewness_",colnames(FinalValidcation))]
FinalValidcation<-FinalValidcation[,-grep("var_",colnames(FinalValidcation))]
FinalValidation<-FinalValidcation[,-grep("amplitude_",colnames(FinalValidcation))]
FinalValidation<-FinalValidation[,-grep("avg_",colnames(FinalValidation))]
FinalValidation<-FinalValidation[,-grep("min_",colnames(FinalValidation))]
FinalValidation<-FinalValidation[,-grep("max_",colnames(FinalValidation))]
FinalValidation<-FinalValidation[,-grep("stddev_",colnames(FinalValidation))]
FinalValidation<-FinalValidation[,-grep("kurtosis_",colnames(FinalValidation))]
FinalValidation<-FinalValidation[,-grep("skewness_",colnames(FinalValidation))]
FinalValidation<-FinalValidation[,-grep("var_",colnames(FinalValidation))]
FinalValidcation<-FinalValidcation[,-(1:7)]
FinalValidation<-FinalValidation[,-(1:7)]
FinalPred<-predict(Fit2,FinalValidation)
table(FinalPred,FinalValidation$Classe)
FinalPred<-predict(Fit2,FinalValidation)
table(FinalPred,FinalValidation$Classe)
table(FinalPred,FinalValidation$classe)
nrow(FinalPred)
FinalPred
Pred2
FinalValidation$classe
str(FinalValidation)
nrow(FinalValidation)
FinalValidation$classe
round(1-(sum(diag(table(Pred2,Testing$classe)))/nrow(Testing)),3)
getwd()
Intrain<-createDataPartition(act$classe,p=.75,list=FALSE)
Intrain<-createDataPartition(y=act$classe,p=.75,list=FALSE)
Intrain<-createDataPartition(y=act$classe,p=.75,list=FALSE)
Trianing<-act[Intrain,]
Testing<-act[-Intrain,]
dim(act)
head(act)
?createDataPartition
class(act$classe)
is.vector(act$classe)
as.vector(act$classe)
Intrain<-createDataPartition(y=as.vector(act$classe),p=.75,list=FALSE)
Trianing<-act[Intrain,]
Testing<-act[-Intrain,]
dim(act)
str(act)
#Clean up some weird datafields
act<-act[,-grep("amplitude_",colnames(act))]
act<-act[,-grep("avg_",colnames(act))]
act<-act[,-grep("min_",colnames(act))]
act<-act[,-grep("max_",colnames(act))]
act<-act[,-grep("stddev_",colnames(act))]
act<-act[,-grep("kurtosis_",colnames(act))]
act<-act[,-grep("skewness_",colnames(act))]
act<-act[,-grep("var_",colnames(act))]
##Remove identity and time-based variables
act<-act[,-(1:7)]
Intrain<-createDataPartition(y=as.vector(act$classe),p=.75,list=FALSE)
Intrain<-createDataPartition(y=act$classe,p=.75,list=FALSE)
Intrain<-createDataPartition(y=act$classe,p=.75,list=FALSE)
Trianing<-act[Intrain,]
Testing<-act[-Intrain,]
Intrain<-createDataPartition(y=act$classe,p=.75,list=FALSE)
Intrain<-createDataPartition(act$classe, p=0.75, list=FALSE)
act$classe
dim(act)
if (!exists("act"))
{
act<-read.csv("Activity.csv",header=TRUE)
}
dim(act)
act<-read.csv("Activity.csv",header=TRUE)
dim(act)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile="Activity.csv", cacheOK=T)
act<-read.csv("Activity.csv",header=TRUE)
dim(act)
act<-act[,-grep("amplitude_",colnames(act))]
act<-act[,-grep("avg_",colnames(act))]
act<-act[,-grep("min_",colnames(act))]
act<-act[,-grep("max_",colnames(act))]
act<-act[,-grep("stddev_",colnames(act))]
act<-act[,-grep("kurtosis_",colnames(act))]
act<-act[,-grep("skewness_",colnames(act))]
act<-act[,-grep("var_",colnames(act))]
dim(act)
act<-act[,-(1:7)]
Intrain<-createDataPartition(y=act$classe,p=.75,list=FALSE)
Trianing<-act[Intrain,]
Testing<-act[-Intrain,]
dim(act)
str(act)
Intrain<-createDataPartition(y=act$classe,p=.75,list=FALSE)
Intrain<-createDataPartition(y=act$classe,p=.75,list=FALSE)
Trianing<-act[Intrain,]
Testing<-act[-Intrain,]
Intrain<-createDataPartition(act$classe, p=0.75, list=FALSE)
Trianing<-act[Intrain,]
Testing<-act[-Intrain,]
if (!file.exists("Activity.csv"))
{
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile="Activity.csv", cacheOK=T)
}
if (!exists("act"))
{
act<-read.csv("Activity.csv",header=TRUE)
}
##Get Packages
library(caret)
set.seed(5252017)
##Check Dims/Features
dim(act)
str(act)
#Clean up some weird datafields
act<-act[,-grep("amplitude_",colnames(act))]
act<-act[,-grep("avg_",colnames(act))]
act<-act[,-grep("min_",colnames(act))]
act<-act[,-grep("max_",colnames(act))]
act<-act[,-grep("stddev_",colnames(act))]
act<-act[,-grep("kurtosis_",colnames(act))]
act<-act[,-grep("skewness_",colnames(act))]
act<-act[,-grep("var_",colnames(act))]
##Remove identity and time-based variables
act<-act[,-(1:7)]
Intrain<-createDataPartition(act$classe, p=0.75, list=FALSE)
Intrain<-createDataPartition(as.vector(act$classe), p=0.75, list=FALSE)
act$classe
act$classe
act$classe
if (!file.exists("Activity.csv"))
{
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", destfile="Activity.csv", cacheOK=T)
}
act<-read.csv("Activity.csv",header=TRUE)
##Get Packages
library(caret)
set.seed(5252017)
##Check Dims/Features
dim(act)
str(act)
#Clean up some weird datafields
act<-act[,-grep("amplitude_",colnames(act))]
act<-act[,-grep("avg_",colnames(act))]
act<-act[,-grep("min_",colnames(act))]
act<-act[,-grep("max_",colnames(act))]
act<-act[,-grep("stddev_",colnames(act))]
act<-act[,-grep("kurtosis_",colnames(act))]
act<-act[,-grep("skewness_",colnames(act))]
act<-act[,-grep("var_",colnames(act))]
##Remove identity and time-based variables
act<-act[,-(1:7)]
Intrain<-createDataPartition(as.vector(act$classe), p=0.75, list=FALSE)
Trianing<-act[Intrain,]
Testing<-act[-Intrain,]
Intrain<-createDataPartition(as.vector(act$classe), p=0.75, list=FALSE)
act$classe
Intrain<-createDataPartition(as.vector(act$classe), p=0.75, list=FALSE)
Trianing<-act[Intrain,]
Testing<-act[-Intrain,]
dim(act)
c<-abs(cor(act[,-53]))
diag(c)<-0
which(c>.8,arr.ind = TRUE)
nrow(which(c>.8,arr.ind = TRUE))
nrow(which(c>.9,arr.ind = TRUE))
nrow(which(c>.95,arr.ind = TRUE))
which(c>.95,arr.ind = TRUE)
which(c>.9,arr.ind = TRUE)
plot(gyros_dumbbell,gyros_dumbbell_z,data=act )
plot(gyros_dumbbell_z,gyros_dumbbell_z,data=act )
plot(gyros_dumbbell_z,gyros_dumbbell_x,data=act )
plot(act$gyros_dumbbell_z,act$gyros_dumbbell_x,data=act )
plot(act$accel_belt_y,act$roll_belt)
nrow(which(c>.95,arr.ind = TRUE))
nrow(which(c>.9,arr.ind = TRUE))
nrow(which(c>.8,arr.ind = TRUE))
?preProcess
preProcess(Training[,-53],method='pca')
pca<-preProcess(Training[,-53],method='pca')
dim(pca)
pca
class(pca)
trainpc<-predict(pca,Training[,-53])
trainpc
colnames(trainpc)
?predict
Fit1<-train(Training$classe ~ ., method="gbm",data=trainpc)
confusionMatrix(Training$classe,predict(Fit1,Training))
confusionMatrix(Training$classe,predict(Fit1,trainpc))
